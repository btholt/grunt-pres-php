{
  "name": "grunt-phpunit",
  "description": "Grunt plugin for running phpunit.",
  "homepage": "https://github.com/SaschaGalley/grunt-phpunit",
  "author": {
    "name": "Sascha Galley",
    "email": "me@xash.at",
    "url": "http://xash.at/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SaschaGalley/grunt-phpunit.git"
  },
  "version": "0.3.2",
  "contributors": [
    {
      "name": "James Cryer",
      "email": "chat@jamescryer.com",
      "url": "http://www.jamescryer.com/"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": "0.10.x"
  },
  "scripts": {
    "test": "grunt"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "phpunit"
  ],
  "readme": "# grunt-phpunit\n\n> Grunt plugin for running phpunit.\n\n##Getting Started\n\nThis plugin requires Grunt `0.4.0`.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\n\n1. Install this grunt plugin with the following command:\n\n\t```shell\n\tnpm install grunt-phpunit --save-dev\n\t```\n\n\n2. [Install phpunit](https://github.com/sebastianbergmann/phpunit/#installation) (preferably with [composer](https://github.com/composer/composer))\n\n\t```shell\n\tcomposer install\n\t```\n\n\n3. Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n\t```js\n\tgrunt.loadNpmTasks('grunt-phpunit');\n\t```\n\n\n##PHPUnit task\n\n_Run this task with the `grunt phpunit` command._\n\n###Usage Example\n\n```js\nphpunit: {\n\tclasses: {\n\t\tdir: 'tests/php/'\n\t},\n\toptions: {\n\t\tbin: 'vendor/bin/phpunit',\n\t\tbootstrap: 'tests/php/phpunit.php',\n\t\tcolors: true\n\t}\n}\n```\n\n###Target Properties\n####dir\nType: `String`\n\nThe directory where phpunit should be run, i.e. where the test classes and the bootstrap are located in.\n\n###Options\n####bin\nType: `String`  Default: `'phpunit'`\n\nThe executable binary.\n\n####logJunit\nType: `String` Default: `false`\n\nLog test execution in JUnit XML format to file.\n\n####logTap\nType: `String` Default: `false`\n\nLog test execution in TAP format to file.\n\n####logJson\nType: `String` Default: `false`\n\nLog test execution in JSON format.\n\n####coverageClover\nType: `String` Default: `false`\n\nGenerate code coverage report in Clover XML format.\n\n####coverageHtml\nType: `String` Default: `false`\n\nGenerate code coverage report in HTML format.\n\n####coveragePhp\nType: `String` Default: `false`\n\nSerialize PHP_CodeCoverage object to file.\n\n####coverage (or coverageText)\nType: `Boolean` Default: `false`\n\nGenerate code coverage report in text format. Default to writing to the standard output. This option can also be set by running the task with `--coverage`.\n\n####testdoxHtml\nType: `String` Default: `false`\n\nWrite agile documentation in HTML format to file.\n\n####testdoxText\nType: `String` Default: `false`\n\nWrite agile documentation in Text format to file.\n\n####filter\nType: `String` Default: `false`\n\nFilter which tests to run.\n\n####group\nType: `String` Default: `false`\n\nOnly runs tests from the specified group(s).\n\n####excludeGroup\nType: `String` Default: `false`\n\nExclude tests from the specified group(s).\n\n####listGroups\nType: `Boolean` Default: `false`\n\nList available test groups. This option can also be set by running the task with `--list-groups`.\n\n####loader\nType: `String` Default: `false`\n\nTestSuiteLoader implementation to use.\n\n####printer\nType: `String` Default: `false`\n\nTestSuiteListener implementation to use.\n\n####repeat\nType: `String` Default: `false`\n\nRuns the test(s) repeatedly.\n\n####tap\nType: `Boolean` Default: `false`\n\nReport test execution progress in TAP format. This option can also be set by running the task with `--tap`.\n\n####testdox\nType: `Boolean` Default: `false`\n\nReport test execution progress in TestDox format. This option can also be set by running the task with `--testdox`.\n\n####colors\nType: `Boolean` Default: `false`\n\nUse colors in output. This option can also be set by running the task with `--colors`.\n\n####stderr\nType: `Boolean` Default: `false`\n\nWrite to STDERR instead of STDOUT. This option can also be set by running the task with `--stderr`.\n\n####stopOnError\nType: `Boolean` Default: `false`\n\nStop execution upon first error. This option can also be set by running the task with `--stop-on-error`.\n\n####stopOnFailure\nType: `Boolean` Default: `false`\n\nStop execution upon first error or failure. This option can also be set by running the task with `--stop-on-failure`.\n\n####stopOnSkipped\nType: `Boolean` Default: `false`\n\nStop execution upon first skipped test. This option can also be set by running the task with `--stop-on-skipped`.\n\n####stopOnIncomplete\nType: `Boolean` Default: `false`\n\nStop execution upon first incomplete test. This option can also be set by running the task with `--stop-on-incomplete`.\n\n####strict\nType: `Boolean` Default: `false`\n\nRun tests in strict mode. This option can also be set by running the task with `--strict`.\n\n####verbose\nType: `Boolean` Default: `false`\n\nOutput more verbose information. This option can also be set by running the task with `--verbose`.\n\n####debug\nType: `Boolean` Default: `false`\n\nDisplay debbuging information during test execution. This option can also be set by running the task with `--debug`.\n\n####processIsolation\nType: `Boolean` Default: `false`\n\nRun each test in a separate PHP process. This option can also be set by running the task with `--process-isolation`.\n\n####noGlobalsBackup\nType: `Boolean` Default: `false`\n\nDo not backup and restore $GLOBALS for each test. This option can also be set by running the task with `--no-globals-backup`.\n\n####staticBackup\nType: `Boolean` Default: `false`\n\nBackup and restore static attributes for each test. This option can also be set by running the task with `--static-backup`.\n\n####bootstrap\nType: `String` Default: `false`\n\nA \"bootstrap\" PHP file that is run before the tests.\n\n####configuration\nType: `String` Default: `false`\n\nRead configuration from XML file.\n\n####noConfiguration\nType: `Boolean` Default: `false`\n\nIgnore default configuration file (phpunit.xml). This option can also be set by running the task with `--no-configuration`.\n\n####includePath\nType: `String` Default: `false`\n\nPrepend PHP's include_path with given path(s).\n\n####d\nType: `String` Default: `false`\n\nSets a php.ini value.\n\n####followOutput\nType: `Boolean` Default: `false`\n\nPrints the output to the console immediately, instead of displaying the whole ouput at the end.\nThis can be useful -combining with debug: true- when there are many long running tests.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/SaschaGalley/grunt-phpunit/issues"
  },
  "_id": "grunt-phpunit@0.3.2",
  "dist": {
    "shasum": "4d2a908156b10cc8bff5bcda4994d9a3b147c38c"
  },
  "_from": "grunt-phpunit@",
  "_resolved": "https://registry.npmjs.org/grunt-phpunit/-/grunt-phpunit-0.3.2.tgz"
}
